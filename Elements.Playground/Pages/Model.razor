@page "/"
@using System.IO
@using System.Web

@inject IJSRuntime JSRuntime
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject NavigationManager MyNavigationManager

<div class=grid>
    @* <button class="run" disabled=@loading @onclick="Run">Run</button> *@
    @* <div id="editor">@csharp</div> *@
    <div id="model"></div>
    <div id="graph"></div>
    <div class="output"><p>@CodeRunner.Output</p></div>
</div>

@code {

    bool loading = true;
    [Inject] private HttpClient Client { get; set; }

    protected override Task OnInitializedAsync()
    {
        CodeRunner.Runtime = JSUnmarshalledRuntime;

        Compiler.InitializeMetadataReferences(Client);
        CodeRunner.ExecutionComplete += () =>
        {
            Console.WriteLine("Updating state after execution completion.");
            StateHasChanged();
        };
        CodeRunner.CompilationComplete += () =>
        {
            Console.WriteLine("Updating state after compilation completion.");
            StateHasChanged();
        };

        base.OnInitializedAsync();

        return Compiler.WhenReady(() =>
        {
            loading = false;
            return Task.FromResult(0);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            @* await JSRuntime.InvokeVoidAsync("model.initializeEditor"); *@
            await JSRuntime.InvokeVoidAsync("model.initializeGraph");
            await JSRuntime.InvokeVoidAsync("model.initialize3D");
        }
    }
}