@page "/"
@using System.IO
@using System.Web

@inject IJSRuntime JSRuntime
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject NavigationManager MyNavigationManager

<div class=grid>
    @* <div id="editor">@CodeRunner.Code</div> *@
    <div id="model">
        <div class="output">
            <p class="success">Compilation: @CodeRunner.CompilationTime ms</p>
            <p class="success">Execution: @CodeRunner.ExecutionTime ms</p>
            <p class="success">Geometry Generation: @CodeRunner.GeometryGenerationTime ms</p>
            <p class="success">Draw: @CodeRunner.DrawingTime ms</p>
            <p class="message">@((MarkupString)CodeRunner.Output)</p>
            <p class="error">@((MarkupString)CodeRunner.Error)</p>
        </div>
    </div>
    <div id="graph">
        <select id="node-types" @onchange="AddNode">
            <option disabled selected>Select a node type...</option>
            <option>Vector3</option>
            <option>TransformAt</option>
            <option>Line</option>
            <option>Intersects</option>
            <option>Rectangle</option>
            <option>Material</option>
            <option>Beam</option>
        </select>
    </div>
</div>

@code {

    bool loading = true;
    [Inject] private HttpClient Client { get; set; }

    protected override Task OnInitializedAsync()
    {
        CodeRunner.Runtime = JSUnmarshalledRuntime;

        Compiler.InitializeMetadataReferences(Client);
        CodeRunner.ExecutionComplete += () =>
        {
            Console.WriteLine("Updating state after execution completion.");
            StateHasChanged();
        };
        CodeRunner.CompilationComplete += () =>
        {
            Console.WriteLine("Updating state after compilation completion.");
            StateHasChanged();
        };

        base.OnInitializedAsync();

        return Compiler.WhenReady(() =>
        {
            loading = false;
            return Task.FromResult(0);
        });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if(firstRender)
        {
            @* await JSRuntime.InvokeVoidAsync("model.initializeEditor"); *@
            await JSRuntime.InvokeVoidAsync("model.initializeGraph");
            await JSRuntime.InvokeVoidAsync("model.initialize3D");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddNode(ChangeEventArgs args)
    {
        await JSRuntime.InvokeVoidAsync("model.addNode", args.Value);
    }
}